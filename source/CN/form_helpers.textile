h2. Rails 的表单辅助方法 (Rails Form helpers)

在网页应用中, 表单是用户输入的重要接口. 尽管如此, 面对表单中如此繁多的属性名和参数, 表单的编写和维护会很快的变得乏味无趣. 现在不同了, Rails 能帮助你来处理这些复杂的表单 —— 你只需要调用几个辅助方法, 一个你需要的表单就自动生成了. 额, 不过... 因为表单的需求是如此的多样化, 开发者也不得不先去了解那些个相似的辅助方法的区别, 才能更好的偷懒.

在这个向导里, 你会:

* 建立搜索表单以及各种没有与特定 model 绑定的表单
* 建立绑定在 model 上的表单, 增加和修改特定的数据库记录
* 从各种不同的数据中生成 +select boxes+
* 理解 Rails 提供的各种日期和时间辅助方法
* 理解需要上传文件的表单的不同, 是什么造成了不同
* 学习如何为外部资源建立表单
* 找到哪里可以学习更加复杂的表单写法

endprologue.

NOTE: 这个向导并不准备成为一个完整的表单辅助方法以及他们的参数的可用文档. 完整的文档请访问 "the Rails API documentation":http://api.rubyonrails.org/

h3. Dealing with Basic Forms

The most basic form helper is +form_tag+.

<erb>
<%= form_tag do %>
  Form contents
<% end %>
</erb>

When called without arguments like this, it creates a +&lt;form&gt;+ tag which, when submitted, will POST to the current page. For instance, assuming the current page is +/home/index+, the generated HTML will look like this (some line breaks added for readability):

<html>
<form accept-charset="UTF-8" action="/home/index" method="post">
  <div style="margin:0;padding:0">
    <input name="utf8" type="hidden" value="&#x2713;" />
    <input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" />
  </div>
  Form contents
</form>
</html>

Now, you'll notice that the HTML contains something extra: a +div+ element with two hidden input elements inside. This div is important, because the form cannot be successfully submitted without it. The first input element with name +utf8+ enforces browsers to properly respect your form's character encoding and is generated for all forms whether their actions are "GET" or "POST". The second input element with name +authenticity_token+ is a security feature of Rails called *cross-site request forgery protection*, and form helpers generate it for every non-GET form (provided that this security feature is enabled). You can read more about this in the "Security Guide":./security.html#cross-site-request-forgery-csrf.

NOTE: Throughout this guide, the +div+ with the hidden input elements will be excluded from code samples for brevity.

h4. A Generic Search Form

One of the most basic forms you see on the web is a search form. This form contains:

# a form element with "GET" method,
# a label for the input,
# a text input element, and
# a submit element.

To create this form you will use +form_tag+, +label_tag+, +text_field_tag+, and +submit_tag+, respectively. Like this:

<erb>
<%= form_tag("/search", :method => "get") do %>
  <%= label_tag(:q, "Search for:") %>
  <%= text_field_tag(:q) %>
  <%= submit_tag("Search") %>
<% end %>
</erb>

This will generate the following HTML:

<html>
<form accept-charset="UTF-8" action="/search" method="get">
  <label for="q">Search for:</label>
  <input id="q" name="q" type="text" />
  <input name="commit" type="submit" value="Search" />
</form>
</html>

TIP: For every form input, an ID attribute is generated from its name ("q" in the example). These IDs can be very useful for CSS styling or manipulation of form controls with JavaScript.

Besides +text_field_tag+ and +submit_tag+, there is a similar helper for _every_ form control in HTML.

IMPORTANT: Always use "GET" as the method for search forms. This allows users to bookmark a specific search and get back to it. More generally Rails encourages you to use the right HTTP verb for an action.

h4. Multiple Hashes in Form Helper Calls

The +form_tag+ helper accepts 2 arguments: the path for the action and an options hash. This hash specifies the method of form submission and HTML options such as the form element's class.

As with the +link_to+ helper, the path argument doesn't have to be given a string; it can be a hash of URL parameters recognizable by Rails' routing mechanism, which will turn the hash into a valid URL. However, since both arguments to +form_tag+ are hashes, you can easily run into a problem if you would like to specify both. For instance, let's say you write this:

<ruby>
form_tag(:controller => "people", :action => "search", :method => "get", :class => "nifty_form")
# => '<form accept-charset="UTF-8" action="/people/search?method=get&class=nifty_form" method="post">'
</ruby>

Here, +method+ and +class+ are appended to the query string of the generated URL because you even though you mean to write two hashes, you really only specified one. So you need to tell Ruby which is which by delimiting the first hash (or both) with curly brackets. This will generate the HTML you expect:

<ruby>
form_tag({:controller => "people", :action => "search"}, :method => "get", :class => "nifty_form")
# => '<form accept-charset="UTF-8" action="/people/search" method="get" class="nifty_form">'
</ruby>

h4. Helpers for Generating Form Elements

Rails provides a series of helpers for generating form elements such as checkboxes, text fields, and radio buttons. These basic helpers, with names ending in "_tag" (such as +text_field_tag+ and +check_box_tag+), generate just a single +&lt;input&gt;+ element. The first parameter to these is always the name of the input. When the form is submitted, the name will be passed along with the form data, and will make its way to the +params+ hash in the controller with the value entered by the user for that field. For example, if the form contains +<%= text_field_tag(:query) %>+, then you would be able to get the value of this field in the controller with +params[:query]+.

When naming inputs, Rails uses certain conventions that make it possible to submit parameters with non-scalar values such as arrays or hashes, which will also be accessible in +params+. You can read more about them in "chapter 7 of this guide":#understanding-parameter-naming-conventions. For details on the precise usage of these helpers, please refer to the "API documentation":http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html.

h5. Checkboxes

Checkboxes are form controls that give the user a set of options they can enable or disable:

<erb>
<%= check_box_tag(:pet_dog) %>
<%= label_tag(:pet_dog, "I own a dog") %>
<%= check_box_tag(:pet_cat) %>
<%= label_tag(:pet_cat, "I own a cat") %>
</erb>

This generates the following:

<html>
<input id="pet_dog" name="pet_dog" type="checkbox" value="1" />
<label for="pet_dog">I own a dog</label>
<input id="pet_cat" name="pet_cat" type="checkbox" value="1" />
<label for="pet_cat">I own a cat</label>
</html>

The first parameter to +check_box_tag+, of course, is the name of the input. The second parameter, naturally, is the value of the input. This value will be included in the form data (and be present in +params+) when the checkbox is checked.

h5. Radio Buttons

Radio buttons, while similar to checkboxes, are controls that specify a set of options in which they are mutually exclusive (i.e., the user can only pick one):

<erb>
<%= radio_button_tag(:age, "child") %>
<%= label_tag(:age_child, "I am younger than 21") %>
<%= radio_button_tag(:age, "adult") %>
<%= label_tag(:age_adult, "I'm over 21") %>
</erb>

Output:

<html>
<input id="age_child" name="age" type="radio" value="child" />
<label for="age_child">I am younger than 21</label>
<input id="age_adult" name="age" type="radio" value="adult" />
<label for="age_adult">I'm over 21</label>
</html>

As with +check_box_tag+, the second parameter to +radio_button_tag+ is the value of the input. Because these two radio buttons share the same name (age) the user will only be able to select one, and +params[:age]+ will contain either "child" or "adult".

NOTE: Always use labels for checkbox and radio buttons. They associate text with a specific option and make it easier for users to click the inputs by expanding the clickable region.

h4. Other Helpers of Interest

Other form controls worth mentioning are textareas, password fields, hidden fields, search fields, telephone fields, date fields, URL fields and email fields:

<erb>
<%= text_area_tag(:message, "Hi, nice site", :size => "24x6") %>
<%= password_field_tag(:password) %>
<%= hidden_field_tag(:parent_id, "5") %>
<%= search_field(:user, :name) %>
<%= telephone_field(:user, :phone) %>
<%= date_field(:user, :born_on) %>
<%= url_field(:user, :homepage) %>
<%= email_field(:user, :address) %>
</erb>

Output:

<html>
<textarea id="message" name="message" cols="24" rows="6">Hi, nice site</textarea>
<input id="password" name="password" type="password" />
<input id="parent_id" name="parent_id" type="hidden" value="5" />
<input id="user_name" name="user[name]" type="search" />
<input id="user_phone" name="user[phone]" type="tel" />
<input id="user_born_on" name="user[born_on]" type="date" />
<input id="user_homepage" name="user[homepage]" type="url" />
<input id="user_address" name="user[address]" type="email" />
</html>

Hidden inputs are not shown to the user but instead hold data like any textual input. Values inside them can be changed with JavaScript.

IMPORTANT: The search, telephone, date, URL, and email inputs are HTML5 controls. If you require your app to have a consistent experience in older browsers, you will need an HTML5 polyfill (provided by CSS and/or JavaScript). There is definitely "no shortage of solutions for this":https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills, although a couple of popular tools at the moment are "Modernizr":http://www.modernizr.com/ and "yepnope":http://yepnopejs.com/, which provide a simple way to add functionality based on the presence of detected HTML5 features.

TIP: If you're using password input fields (for any purpose), you might want to configure your application to prevent those parameters from being logged. You can learn about this in the "Security Guide":security.html#logging.

h3. Dealing with Model Objects

h4. Model Object Helpers

A particularly common task for a form is editing or creating a model object. While the +*_tag+ helpers can certainly be used for this task they are somewhat verbose as for each tag you would have to ensure the correct parameter name is used and set the default value of the input appropriately. Rails provides helpers tailored to this task. These helpers lack the <notextile>_tag</notextile> suffix, for example +text_field+, +text_area+.

For these helpers the first argument is the name of an instance variable and the second is the name of a method (usually an attribute) to call on that object. Rails will set the value of the input control to the return value of that method for the object and set an appropriate input name. If your controller has defined +@person+ and that person's name is Henry then a form containing:

<erb>
<%= text_field(:person, :name) %>
</erb>

will produce output similar to

<erb>
<input id="person_name" name="person[name]" type="text" value="Henry"/>
</erb>

Upon form submission the value entered by the user will be stored in +params[:person][:name]+. The +params[:person]+ hash is suitable for passing to +Person.new+ or, if +@person+ is an instance of Person, +@person.update_attributes+. While the name of an attribute is the most common second parameter to these helpers this is not compulsory. In the example above, as long as person objects have a +name+ and a +name=+ method Rails will be happy.

WARNING: You must pass the name of an instance variable, i.e. +:person+ or +"person"+, not an actual instance of your model object.

Rails provides helpers for displaying the validation errors associated with a model object. These are covered in detail by the "Active Record Validations and Callbacks":./active_record_validations_callbacks.html#displaying-validation-errors-in-the-view guide.

h4. Binding a Form to an Object

While this is an increase in comfort it is far from perfect. If Person has many attributes to edit then we would be repeating the name of the edited object many times. What we want to do is somehow bind a form to a model object, which is exactly what +form_for+ does.

Assume we have a controller for dealing with articles +app/controllers/articles_controller.rb+:

<ruby>
def new
  @article = Article.new
end
</ruby>

The corresponding view +app/views/articles/new.html.erb+ using +form_for+ looks like this:

<erb>
<%= form_for @article, :url => { :action => "create" }, :html => {:class => "nifty_form"} do |f| %>
  <%= f.text_field :title %>
  <%= f.text_area :body, :size => "60x12" %>
  <%= f.submit "Create" %>
<% end %>
</erb>

There are a few things to note here:

# +@article+ is the actual object being edited.
# There is a single hash of options. Routing options are passed in the +:url+ hash, HTML options are passed in the +:html+ hash. Also you can provide a +:namespace+ option for your form to ensure uniqueness of id attributes on form elements. The namespace attribute will be prefixed with underscore on the generated HTML id.
# The +form_for+ method yields a *form builder* object (the +f+ variable).
# Methods to create form controls are called *on* the form builder object +f+

The resulting HTML is:

<html>
<form accept-charset="UTF-8" action="/articles/create" method="post" class="nifty_form">
  <input id="article_title" name="article[title]" type="text" />
  <textarea id="article_body" name="article[body]" cols="60" rows="12"></textarea>
  <input name="commit" type="submit" value="Create" />
</form>
</html>

The name passed to +form_for+ controls the key used in +params+ to access the form's values. Here the name is +article+ and so all the inputs have names of the form +article[<em>attribute_name</em>]+. Accordingly, in the +create+ action +params[:article]+ will be a hash with keys +:title+ and +:body+. You can read more about the significance of input names in the parameter_names section.

The helper methods called on the form builder are identical to the model object helpers except that it is not necessary to specify which object is being edited since this is already managed by the form builder.

You can create a similar binding without actually creating +&lt;form&gt;+ tags with the +fields_for+ helper. This is useful for editing additional model objects with the same form. For example if you had a Person model with an associated ContactDetail model you could create a form for creating both like so:

<erb>
<%= form_for @person, :url => { :action => "create" } do |person_form| %>
  <%= person_form.text_field :name %>
  <%= fields_for @person.contact_detail do |contact_details_form| %>
    <%= contact_details_form.text_field :phone_number %>
  <% end %>
<% end %>
</erb>

which produces the following output:

<html>
<form accept-charset="UTF-8" action="/people/create" class="new_person" id="new_person" method="post">
  <input id="person_name" name="person[name]" type="text" />
  <input id="contact_detail_phone_number" name="contact_detail[phone_number]" type="text" />
</form>
</html>

The object yielded by +fields_for+ is a form builder like the one yielded by +form_for+ (in fact +form_for+ calls +fields_for+ internally).

h4. Relying on Record Identification

The Article model is directly available to users of the application, so -- following the best practices for developing with Rails -- you should declare it *a resource*:

<ruby>
resources :articles
</ruby>

TIP: Declaring a resource has a number of side-affects. See "Rails Routing From the Outside In":routing.html#resource-routing-the-rails-default for more information on setting up and using resources.

When dealing with RESTful resources, calls to +form_for+ can get significantly easier if you rely on *record identification*. In short, you can just pass the model instance and have Rails figure out model name and the rest:

<ruby>
## Creating a new article
# long-style:
form_for(@article, :url => articles_path)
# same thing, short-style (record identification gets used):
form_for(@article)

## Editing an existing article
# long-style:
form_for(@article, :url => article_path(@article), :html => { :method => "patch" })
# short-style:
form_for(@article)
</ruby>

Notice how the short-style +form_for+ invocation is conveniently the same, regardless of the record being new or existing. Record identification is smart enough to figure out if the record is new by asking +record.new_record?+. It also selects the correct path to submit to and the name based on the class of the object.

Rails will also automatically set the +class+ and +id+ of the form appropriately: a form creating an article would have +id+ and +class+ +new_article+. If you were editing the article with id 23, the +class+ would be set to +edit_article+ and the id to +edit_article_23+. These attributes will be omitted for brevity in the rest of this guide.

WARNING: When you're using STI (single-table inheritance) with your models, you can't rely on record identification on a subclass if only their parent class is declared a resource. You will have to specify the model name, +:url+, and +:method+ explicitly.

h5. Dealing with Namespaces

If you have created namespaced routes, +form_for+ has a nifty shorthand for that too. If your application has an admin namespace then

<ruby>
form_for [:admin, @article]
</ruby>

will create a form that submits to the articles controller inside the admin namespace (submitting to +admin_article_path(@article)+ in the case of an update). If you have several levels of namespacing then the syntax is similar:

<ruby>
form_for [:admin, :management, @article]
</ruby>

For more information on Rails' routing system and the associated conventions, please see the "routing guide":routing.html.


h4. How do forms with PATCH, PUT, or DELETE methods work?

The Rails framework encourages RESTful design of your applications, which means you'll be making a lot of "PATCH" and "DELETE" requests (besides "GET" and "POST"). However, most browsers _don't support_ methods other than "GET" and "POST" when it comes to submitting forms.

Rails works around this issue by emulating other methods over POST with a hidden input named +"_method"+, which is set to reflect the desired method:

<ruby>
form_tag(search_path, :method => "patch")
</ruby>

output:

<html>
<form accept-charset="UTF-8" action="/search" method="post">
  <div style="margin:0;padding:0">
    <input name="_method" type="hidden" value="patch" />
    <input name="utf8" type="hidden" value="&#x2713;" />
    <input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" />
  </div>
  ...
</html>

When parsing POSTed data, Rails will take into account the special +_method+ parameter and acts as if the HTTP method was the one specified inside it ("PATCH" in this example).

h3. 让 Select Boxes 更简单

HTML 中的 Select boxes 需要填写很多参数 ( 比如每个选择都需要一个 +OPTION+ 元素), 为了解放生产力, 我们还是让 Rails 来自动生成它们吧

HTML 代码看起来大概是这样

<html>
<select name="city_id" id="city_id">
  <option value="1">Lisbon</option>
  <option value="2">Madrid</option>
  ...
  <option value="12">Berlin</option>
</select>
</html>

现在你有一个城市名单, 城市名将成为用户的属性. 你知道的, Rails 更喜欢存储城市的 ID, 所以 ID 会被填写再选项的 value 值上. 让我们看看 Rails 是怎么处理这些的吧.

h4. Select 和 Option 标签

最常用的辅助代码 (helper) 是 +select_tag+, 就像这个名字暗示的那样, 它会产生一个 +SELECT+ 标签以及包含在其中的 +option+ 标签

<erb>
<%= select_tag(:city_id, '<option value="1">Lisbon</option>...') %>
</erb>

下面让我们用 +options_for_select+ 辅助代码来动态生成 option 标签

<erb>
<%= options_for_select([['Lisbon', 1], ['Madrid', 2], ...]) %>

output:

<option value="1">Lisbon</option>
<option value="2">Madrid</option>
...
</erb>

+options_for_select+ 的第一个参数是一个嵌套的数组, 每条记录都有两个元素: 选项名(option text, 也就是城市名) 以及选项值(option value, 也就是城市 id). 选项值会被传递给 controller. 嗯, 通常来说, 这个值会与你数据库对象的 id 相同. 不过也请放心, 这并不是强制规定的.

知道这些后, 你可以使用 +select_tag+ 和 +options_for_select+ 来书写一个清晰简单的选择列表了:

<erb>
<%= select_tag(:city_id, options_for_select(...)) %>
</erb>

+options_for_select+ 允许你设定一个默认选项, 只需要在最后传入一个默认的值, 就像这样:

<erb>
<%= options_for_select([['Lisbon', 1], ['Madrid', 2], ...], 2) %>

output:

<option value="1">Lisbon</option>
<option value="2" selected="selected">Madrid</option>
...
</erb>

当 Rails 看到最后这个参数后, 将会给拥有相同值的 +option+ 标签加上 +selected+ 属性.

TIP: +option_for_select+ 的第二个参数必须要与你期望的默认值完全相等. 尤其是如果你想要的选项值是数字2, 那你就不能传入字符串 "2" 给 +options_for_select+ -- 你必须传入 2.

h4. 与 Model 关联的 Select Boxes

大多数情况下, 表单都会和一个特定的数据库 model 捆绑在一起. 而且你也会希望 Rails 提供一些辅助方法来搞定这些数据上的问题. 跟其他的辅助方法一样的是, 当你删掉 +select_tag+ 的尾缀 +_tag+ 时:

<ruby>
# controller:
@person = Person.new(:city_id => 2)
</ruby>

<erb>
# view:
<%= select(:person, :city_id, [['Lisbon', 1], ['Madrid', 2], ...]) %>
</erb>

留意第三个参数 —— 选项数组. 还记得么, 这就是你之前传递给 +options_for_select+ 的参数. 这样做的一个优势是你不用担心默认选择的城市 ）—— Rails 会选择与 +@person.city_id+ 相同的值作为默认.

就像其他的辅助方法, 如果你在一个 form_builder 里面使用 +select+ 辅助方法, 并且限定了 +@person+ 对象, 语法就变成了这样

<erb>
# select on a form builder
<%= f.select(:city_id, ...) %>
</erb>

WARNING: 用 +select+ 方法(或者其他类似的辅助方法比如 +collection_select+, +select_tag+)来设定 +belongs_to+ 关系时, 你必须传入外键的名字 (就像例子里的 +city_id+), 而不是关联项目的名字. 如果你指定了 +city+ 而不是 +city_id+, 接着你传入了 +params+ 哈希给 +Person.new+ 或者 +update_attributes+ 时, Active Record 会抛出一个错误, 大概是这样: <tt> ActiveRecord::AssociationTypeMismatch: City(#17815740) expected, got String(#1138750) </tt>. 你还得小心一些潜在的安全隐患, 比如允许用户直接修改外键. 你可以使用 +attr_protected+ 和 +attr_accesssible+ 来控制 mass_assignment 的权限. 更多的安全相关细节, 请转向 "Ruby On Rails Security Guide":security.html#mass-assignment.

h4. 从任意的对象中生成 Option 标签

你必须提供一个包含了文字和数值的数组给 +options_for_select+ 方法来生成 +option+ 标签. 但若你有一个 City model (一个 Active Record 记录), 而且你想使用这个 model 的实例集合(collection)来生成 +option+ 标签怎么办? 一种解决方案就是遍历整个嵌套的数组: 

<erb>
<% cities_array = City.all.map { |city| [city.name, city.id] } %>
<%= options_for_select(cities_array) %>
</erb>

这是一个很不错的解决方案, 但是 Rails 提供了更懒的方法(^_^): +options_from_collection_for_select+. 你可以提供任意的对象集合和两个额外的参数给这个辅助方法 —— 用来读取所需的 *value* 和 *text* 值:

<erb>
<%= options_from_collection_for_select(City.all, :id, :name) %>
</erb>

就像名字暗示的那样, 它只能产生 +option+ 标签. 就像之前的 +options_for_select+ 一样, 如果你想要一个正常的 +select box+, 你还是需要把它跟 +select_tag+ 一起使用. 就像 +select_tag+ 和 +options_for_select+ 组合成为 +select+ 一样, 当你处理 model 对象时, +collection_select+ 就是 +select_tag+ 和 +options_from_collection_for_select+ 的组合.

<erb>
<%= collection_select(:person, :city_id, City.all, :id, :name) %>
</erb>

换一种说法, +options_from_collection_for_select+ 之于 +collection_select+, 就像 +options_for_select+ 之于 +select+.

NOTE: 传递给 +options_for_select+ 的属性对应该是 +text+ 在前而 +value+ 在后. 但是对于 +options_from_collection_for_select+ 却是 +value+ 方法在前, +text+ 方法在后

h4. 选择时区和国家

为了在 Rails 中支持时区, 你得要求你的用户输入他们所在的时区. 这样就需要你根据预先定义的 TimeZone 对象列表, 用 +collection_select+ 生成一个 +select options+ 元素. 还好还好, Rails 又帮你做了这个准备, 赶快试试 +time_zone_select+ 辅助方法吧:

<erb>
<%= time_zone_select(:person, :time_zone) %>
</erb>

当然, Rails 也提供了更容易自定义的方法 +time_zone_options_for_select+. 请阅读 API 文档来进一步学习.

Rails _曾经_ 还提供 +contry_select+ 辅助方法来选择国家, 但它已经被发配到 "country_select plugin":https://github.com/chrislerum/country_select 去了. 当你用它时呢, 小心里面的一些具有争议的名字. (嗯, 其实这就是它被发配的原因...)

h3. Using Date and Time Form Helpers

You can choose not to use the form helpers generating HTML5 date input fields and use the alternative date and time helpers. These date and time helpers differ from all the other form helpers in two important respects:

# Dates and times are not representable by a single input element. Instead you have several, one for each component (year, month, day etc.) and so there is no single value in your +params+ hash with your date or time.
# Other helpers use the +_tag+ suffix to indicate whether a helper is a barebones helper or one that operates on model objects. With dates and times, +select_date+, +select_time+ and +select_datetime+ are the barebones helpers, +date_select+, +time_select+ and +datetime_select+ are the equivalent model object helpers.

Both of these families of helpers will create a series of select boxes for the different components (year, month, day etc.).

h4. Barebones Helpers

The +select_*+ family of helpers take as their first argument an instance of Date, Time or DateTime that is used as the currently selected value. You may omit this parameter, in which case the current date is used. For example

<erb>
<%= select_date Date.today, :prefix => :start_date %>
</erb>

outputs (with actual option values omitted for brevity)

<html>
<select id="start_date_year" name="start_date[year]"> ... </select>
<select id="start_date_month" name="start_date[month]"> ... </select>
<select id="start_date_day" name="start_date[day]"> ... </select>
</html>

The above inputs would result in +params[:start_date]+ being a hash with keys +:year+, +:month+, +:day+. To get an actual Time or Date object you would have to extract these values and pass them to the appropriate constructor, for example

<ruby>
Date.civil(params[:start_date][:year].to_i, params[:start_date][:month].to_i, params[:start_date][:day].to_i)
</ruby>

The +:prefix+ option is the key used to retrieve the hash of date components from the +params+ hash. Here it was set to +start_date+, if omitted it will default to +date+.

h4(#select-model-object-helpers). Model Object Helpers

+select_date+ does not work well with forms that update or create Active Record objects as Active Record expects each element of the +params+ hash to correspond to one attribute.
The model object helpers for dates and times submit parameters with special names, when Active Record sees parameters with such names it knows they must be combined with the other parameters and given to a constructor appropriate to the column type. For example:

<erb>
<%= date_select :person, :birth_date %>
</erb>

outputs (with actual option values omitted for brevity)

<html>
<select id="person_birth_date_1i" name="person[birth_date(1i)]"> ... </select>
<select id="person_birth_date_2i" name="person[birth_date(2i)]"> ... </select>
<select id="person_birth_date_3i" name="person[birth_date(3i)]"> ... </select>
</html>

which results in a +params+ hash like

<ruby>
{:person => {'birth_date(1i)' => '2008', 'birth_date(2i)' => '11', 'birth_date(3i)' => '22'}}
</ruby>

When this is passed to +Person.new+ (or +update_attributes+), Active Record spots that these parameters should all be used to construct the +birth_date+ attribute and uses the suffixed information to determine in which order it should pass these parameters to functions such as +Date.civil+.

h4. Common Options

Both families of helpers use the same core set of functions to generate the individual select tags and so both accept largely the same options. In particular, by default Rails will generate year options 5 years either side of the current year. If this is not an appropriate range, the +:start_year+ and +:end_year+ options override this. For an exhaustive list of the available options, refer to the "API documentation":http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html.

As a rule of thumb you should be using +date_select+ when working with model objects and +select_date+ in other cases, such as a search form which filters results by date.

NOTE: In many cases the built-in date pickers are clumsy as they do not aid the user in working out the relationship between the date and the day of the week.

h4. Individual Components

Occasionally you need to display just a single date component such as a year or a month. Rails provides a series of helpers for this, one for each component +select_year+, +select_month+, +select_day+, +select_hour+, +select_minute+, +select_second+. These helpers are fairly straightforward. By default they will generate an input field named after the time component (for example "year" for +select_year+, "month" for +select_month+ etc.) although this can be overridden with the  +:field_name+ option. The +:prefix+ option works in the same way that it does for +select_date+ and +select_time+ and has the same default value.

The first parameter specifies which value should be selected and can either be an instance of a Date, Time or DateTime, in which case the relevant component will be extracted, or a numerical value. For example

<erb>
<%= select_year(2009) %>
<%= select_year(Time.now) %>
</erb>

will produce the same output if the current year is 2009 and the value chosen by the user can be retrieved by +params[:date][:year]+.

h3. Uploading Files

A common task is uploading some sort of file, whether it's a picture of a person or a CSV file containing data to process. The most important thing to remember with file uploads is that the rendered form's encoding *MUST* be set to "multipart/form-data". If you use +form_for+, this is done automatically. If you use +form_tag+, you must set it yourself, as per the following example.

The following two forms both upload a file.

<erb>
<%= form_tag({:action => :upload}, :multipart => true) do %>
  <%= file_field_tag 'picture' %>
<% end %>

<%= form_for @person do |f| %>
  <%= f.file_field :picture %>
<% end %>
</erb>

NOTE: Since Rails 3.1, forms rendered using +form_for+ have their encoding set to <tt>multipart/form-data</tt> automatically once a +file_field+ is used inside the block. Previous versions required you to set this explicitly.

Rails provides the usual pair of helpers: the barebones +file_field_tag+ and the model oriented +file_field+. The only difference with other helpers is that you cannot set a default value for file inputs as this would have no meaning. As you would expect in the first case the uploaded file is in +params[:picture]+ and in the second case in +params[:person][:picture]+.

h4. What Gets Uploaded

The object in the +params+ hash is an instance of a subclass of IO. Depending on the size of the uploaded file it may in fact be a StringIO or an instance of File backed by a temporary file. In both cases the object will have an +original_filename+ attribute containing the name the file had on the user's computer and a +content_type+ attribute containing the MIME type of the uploaded file. The following snippet saves the uploaded content in +#{Rails.root}/public/uploads+ under the same name as the original file (assuming the form was the one in the previous example).

<ruby>
def upload
  uploaded_io = params[:person][:picture]
  File.open(Rails.root.join('public', 'uploads', uploaded_io.original_filename), 'w') do |file|
    file.write(uploaded_io.read)
  end
end
</ruby>

Once a file has been uploaded, there are a multitude of potential tasks, ranging from where to store the files (on disk, Amazon S3, etc) and associating them with models to resizing image files and generating thumbnails. The intricacies of this are beyond the scope of this guide, but there are several libraries designed to assist with these. Two of the better known ones are "CarrierWave":https://github.com/jnicklas/carrierwave and "Paperclip":http://www.thoughtbot.com/projects/paperclip.

NOTE: If the user has not selected a file the corresponding parameter will be an empty string.

h4. Dealing with Ajax

Unlike other forms making an asynchronous file upload form is not as simple as providing +form_for+ with <tt>:remote => true</tt>. With an Ajax form the serialization is done by JavaScript running inside the browser and since JavaScript cannot read files from your hard drive the file cannot be uploaded. The most common workaround is to use an invisible iframe that serves as the target for the form submission.

h3. Customizing Form Builders

As mentioned previously the object yielded by +form_for+ and +fields_for+ is an instance of FormBuilder (or a subclass thereof). Form builders encapsulate the notion of displaying form elements for a single object. While you can of course write helpers for your forms in the usual way you can also subclass FormBuilder and add the helpers there. For example

<erb>
<%= form_for @person do |f| %>
  <%= text_field_with_label f, :first_name %>
<% end %>
</erb>

can be replaced with

<erb>
<%= form_for @person, :builder => LabellingFormBuilder do |f| %>
  <%= f.text_field :first_name %>
<% end %>
</erb>

by defining a LabellingFormBuilder class similar to the following:

<ruby>
class LabellingFormBuilder < ActionView::Helpers::FormBuilder
  def text_field(attribute, options={})
    label(attribute) + super
  end
end
</ruby>

If you reuse this frequently you could define a +labeled_form_for+ helper that automatically applies the +:builder => LabellingFormBuilder+ option.

The form builder used also determines what happens when you do

<erb>
<%= render :partial => f %>
</erb>

If +f+ is an instance of FormBuilder then this will render the +form+ partial, setting the partial's object to the form builder. If the form builder is of class LabellingFormBuilder then the +labelling_form+ partial would be rendered instead.

h3. Understanding Parameter Naming Conventions

As you've seen in the previous sections, values from forms can be at the top level of the +params+ hash or nested in another hash. For example in a standard +create+
action for a Person model, +params[:model]+ would usually be a hash of all the attributes for the person to create. The +params+ hash can also contain arrays, arrays of hashes and so on.

Fundamentally HTML forms don't know about any sort of structured data, all they generate is name–value pairs, where pairs are just plain strings. The arrays and hashes you see in your application are the result of some parameter naming conventions that Rails uses.

TIP: You may find you can try out examples in this section faster by using the console to directly invoke Racks' parameter parser. For example,

<ruby>
Rack::Utils.parse_query "name=fred&phone=0123456789"
# => {"name"=>"fred", "phone"=>"0123456789"}
</ruby>

h4. Basic Structures

The two basic structures are arrays and hashes. Hashes mirror the syntax used for accessing the value in +params+. For example if a form contains

<html>
<input id="person_name" name="person[name]" type="text" value="Henry"/>
</html>

the +params+ hash will contain

<erb>
{'person' => {'name' => 'Henry'}}
</erb>

and +params[:person][:name]+ will retrieve the submitted value in the controller.

Hashes can be nested as many levels as required, for example

<html>
<input id="person_address_city" name="person[address][city]" type="text" value="New York"/>
</html>

will result in the +params+ hash being

<ruby>
{'person' => {'address' => {'city' => 'New York'}}}
</ruby>

Normally Rails ignores duplicate parameter names. If the parameter name contains an empty set of square brackets [] then they will be accumulated in an array. If you wanted people to be able to input multiple phone numbers, you could place this in the form:

<html>
<input name="person[phone_number][]" type="text"/>
<input name="person[phone_number][]" type="text"/>
<input name="person[phone_number][]" type="text"/>
</html>

This would result in +params[:person][:phone_number]+ being an array.

h4. Combining Them

We can mix and match these two concepts. For example, one element of a hash might be an array as in the previous example, or you can have an array of hashes. For example a form might let you create any number of addresses by repeating the following form fragment

<html>
<input name="addresses[][line1]" type="text"/>
<input name="addresses[][line2]" type="text"/>
<input name="addresses[][city]" type="text"/>
</html>

This would result in +params[:addresses]+ being an array of hashes with keys +line1+, +line2+ and +city+. Rails decides to start accumulating values in a new hash whenever it encounters an input name that already exists in the current hash.

There's a restriction, however, while hashes can be nested arbitrarily, only one level of "arrayness" is allowed. Arrays can be usually replaced by hashes, for example instead of having an array of model objects one can have a hash of model objects keyed by their id, an array index or some other parameter.

WARNING: Array parameters do not play well with the +check_box+ helper. According to the HTML specification unchecked checkboxes submit no value. However it is often convenient for a checkbox to always submit a value. The +check_box+ helper fakes this by creating an auxiliary hidden input with the same name. If the checkbox is unchecked only the hidden input is submitted and if it is checked then both are submitted but the value submitted by the checkbox takes precedence. When working with array parameters this duplicate submission will confuse Rails since duplicate input names are how it decides when to start a new array element. It is preferable to either use +check_box_tag+ or to use hashes instead of arrays.

h4. Using Form Helpers

The previous sections did not use the Rails form helpers at all. While you can craft the input names yourself and pass them directly to helpers such as +text_field_tag+ Rails also provides higher level support. The two tools at your disposal here are the name parameter to +form_for+ and +fields_for+ and the +:index+ option that helpers take.

You might want to render a form with a set of edit fields for each of a person's addresses. For example:

<erb>
<%= form_for @person do |person_form| %>
  <%= person_form.text_field :name %>
  <% @person.addresses.each do |address| %>
    <%= person_form.fields_for address, :index => address do |address_form|%>
      <%= address_form.text_field :city %>
    <% end %>
  <% end %>
<% end %>
</erb>

Assuming the person had two addresses, with ids 23 and 45 this would create output similar to this:

<html>
<form accept-charset="UTF-8" action="/people/1" class="edit_person" id="edit_person_1" method="post">
  <input id="person_name" name="person[name]" type="text" />
  <input id="person_address_23_city" name="person[address][23][city]" type="text" />
  <input id="person_address_45_city" name="person[address][45][city]" type="text" />
</form>
</html>

This will result in a +params+ hash that looks like

<ruby>
{'person' => {'name' => 'Bob', 'address' => {'23' => {'city' => 'Paris'}, '45' => {'city' => 'London'}}}}
</ruby>

Rails knows that all these inputs should be part of the person hash because you called +fields_for+ on the first form builder. By specifying an +:index+ option you're telling Rails that instead of naming the inputs +person[address][city]+ it should insert that index surrounded by [] between the address and the city. If you pass an Active Record object as we did then Rails will call +to_param+ on it, which by default returns the database id. This is often useful as it is then easy to locate which Address record should be modified. You can pass numbers with some other significance, strings or even +nil+ (which will result in an array parameter being created).

To create more intricate nestings, you can specify the first part of the input name (+person[address]+ in the previous example) explicitly, for example

<erb>
<%= fields_for 'person[address][primary]', address, :index => address do |address_form| %>
  <%= address_form.text_field :city %>
<% end %>
</erb>

will create inputs like

<html>
<input id="person_address_primary_1_city" name="person[address][primary][1][city]" type="text" value="bologna" />
</html>

As a general rule the final input name is the concatenation of the name given to +fields_for+/+form_for+, the index value and the name of the attribute. You can also pass an +:index+ option directly to helpers such as +text_field+, but it is usually less repetitive to specify this at the form builder level rather than on individual input controls.

As a shortcut you can append [] to the name and omit the +:index+ option. This is the same as specifying +:index => address+ so

<erb>
<%= fields_for 'person[address][primary][]', address do |address_form| %>
  <%= address_form.text_field :city %>
<% end %>
</erb>

produces exactly the same output as the previous example.

h3. Forms to external resources

If you need to post some data to an external resource it is still great to build your form using rails form helpers. But sometimes you need to set an +authenticity_token+ for this resource. You can do it by passing an +:authenticity_token => 'your_external_token'+ parameter to the +form_tag+ options:

<erb>
<%= form_tag 'http://farfar.away/form', :authenticity_token => 'external_token') do %>
  Form contents
<% end %>
</erb>

Sometimes when you submit data to an external resource, like payment gateway, fields you can use in your form are limited by an external API. So you may want not to generate an +authenticity_token+ hidden field at all. For doing this just pass +false+ to the +:authenticity_token+ option:

<erb>
<%= form_tag 'http://farfar.away/form', :authenticity_token => false) do %>
  Form contents
<% end %>
</erb>

The same technique is available for the +form_for+ too:

<erb>
<%= form_for @invoice, :url => external_url, :authenticity_token => 'external_token' do |f|
  Form contents
<% end %>
</erb>

Or if you don't want to render an +authenticity_token+ field:

<erb>
<%= form_for @invoice, :url => external_url, :authenticity_token => false do |f|
  Form contents
<% end %>
</erb>

h3. Building Complex Forms

Many apps grow beyond simple forms editing a single object. For example when creating a Person you might want to allow the user to (on the same form) create multiple address records (home, work, etc.). When later editing that person the user should be able to add, remove or amend addresses as necessary. While this guide has shown you all the pieces necessary to handle this, Rails does not yet have a standard end-to-end way of accomplishing this, but many have come up with viable approaches. These include:

* As of Rails 2.3, Rails includes "Nested Attributes":./2_3_release_notes.html#nested-attributes and "Nested Object Forms":./2_3_release_notes.html#nested-object-forms
* Ryan Bates' series of Railscasts on "complex forms":http://railscasts.com/episodes/75
* Handle Multiple Models in One Form from "Advanced Rails Recipes":http://media.pragprog.com/titles/fr_arr/multiple_models_one_form.pdf
* Eloy Duran's "complex-forms-examples":https://github.com/alloy/complex-form-examples/ application
* Lance Ivy's "nested_assignment":https://github.com/cainlevy/nested_assignment/tree/master plugin and "sample application":https://github.com/cainlevy/complex-form-examples/tree/cainlevy
* James Golick's "attribute_fu":https://github.com/jamesgolick/attribute_fu plugin
